# -*- coding: utf-8 -*-
"""day22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SGxfpa5ecv43hkJqq0eT9SYNFtavFtxx
"""



"""Python Iterators:
In Python, an iterator is an object which implements the iterator protocol, which consist of the method __Iter__() and __next__()


-List, tuples, dictionaries, and sets are iterable.

Q.1) Return an iterator from a tuple, and print each value.
"""

mytuple = ("apple", "banana", "cherry")
myit = iter(mytuple)

print(next(myit))
print(next(myit))
print(next(myit))

"""Q.2) Strings are also iterable objects, containing a sequence of characters"""

mystr = "banana"
myit = iter(mystr)

print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))
print(next(myit))

"""Looping through an Iterator

Use for loop

Q.3) Iterate the value of a tuple.
"""

mytuple = ("apple", "banana", "cherry")

for x in mytuple:
  print(x)

"""Q.4) Iterate the characters of a string:"""

mystr = "banana"

for x in mystr:
  print(x)

"""Create an Iterator (In class and objects)
Q.5) Create an iterator that returns numbers, starting with 1, and each sequence will increase by one (returning 1,2,3,4,5, etc):
"""

class MyNumbers:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    x = self.a
    self.a += 1
    return x

myclass = MyNumbers()
myiter = iter(myclass)

print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))
print(next(myiter))

"""StopIteration
Q.6) Stop after 20 iterations:
"""

class MyNumber:
  def __iter__(self):
    self.a = 1
    return self

  def __next__(self):
    if self.a <= 20:
      x = self.a
      self.a += 1
      return x
    else:
      raise StopIteration

myclass = MyNumber()
myiter = iter(myclass)


for x in myiter:
  print(x)